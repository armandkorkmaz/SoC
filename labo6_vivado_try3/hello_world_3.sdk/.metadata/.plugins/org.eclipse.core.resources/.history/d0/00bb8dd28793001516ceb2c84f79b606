/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */
/*
#include <stdio.h>
#include "platform.h"

void print(char *str);

int main()
{
    init_platform();

    print("Hello World\n\r");

    cleanup_platform();
    return 0;
}
*/


#include "xrgb_to_bw.h"
#include "xparameters.h"

#define IMG_SIZE 1000
int img[IMG_SIZE][IMG_SIZE];

/*      Define the base memory address of the led_controller IP core */
#define MY_BASE XPAR_RGB_TO_BW_0_S_AXI_AXILITES_BASEADDR

/* main function */
int main(void){

		/* unsigned 32-bit variables  */
    	u32 red, green, blue;
    	u32 pixel, result;

		int i, j;
    	for (i = 0; i < IMG_SIZE; i++){
    		for (j = 0; j < IMG_SIZE; j++) {
    			img[i][j] = 0x00FFFF;
    		}
    	}
        XRgb_to_bw filter;

        XRgb_to_bw_Initialize(&filter, XPAR_RGB_TO_BW_0_DEVICE_ID);
        //XGpio_Initialize(&dip, XPAR_SWITCHES_DEVICE_ID); // Modify
        XRgb_to_bw_Start(&filter);

        xil_printf("--RGB to BW IP test begin.\n");
        xil_printf("--------------------------------------------\n");
    	xil_printf("--checkpoint 1\n");

    	for (i = 0; i < IMG_SIZE; i++){
    			for (j = 0; j < IMG_SIZE; j++) {

    				while(!XRgb_to_bw_IsReady(&filter));

    				pixel = img[i][j];
    				red = (pixel & 0xFF0000) >> 16;
    				green = (pixel & 0x00FF00) << 8 >> 16;
    				blue = (pixel & 0xFF0000) << 16 >> 16;

    				XRgb_to_bw_WriteReg(MY_BASE, XRGB_TO_BW_AXILITES_ADDR_RED_DATA, red);
    				XRgb_to_bw_WriteReg(MY_BASE, XRGB_TO_BW_AXILITES_ADDR_GREEN_DATA, green);
    				XRgb_to_bw_WriteReg(MY_BASE, XRGB_TO_BW_AXILITES_ADDR_BLUE_DATA, blue);

    				xil_printf("red: %08x\n", red);
    				xil_printf("green: %08x\n", green);
    				xil_printf("blue: %08x\n", blue);

    				XRgb_to_bw_Start(&filter);

    				while(!XRgb_to_bw_IsDone(&filter));

    				result = XRgb_to_bw_ReadReg(MY_BASE, XRGB_TO_BW_AXILITES_ADDR_AP_RETURN);
    				xil_printf("result bw: %08x\r\n", result);
    			}
    	}
      //XMul_Release(&multiplicador);
        /* Loop forever */
//        while(1){
//        	xil_printf("loop\r\n");
//        	short a = 9;
//        	xil_printf("a es: %d\n", a);
 //          xil_printf("producto: 0x%08x\r\n", producto);

//                }
    	return 0;
}
